package agency.highlysuspect.halogen.util.collections;

import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;

public class DefaultedMap<K, V> implements Map<K, V> {
	public DefaultedMap(Map<K, V> impl, Function<K, V> valueCreator) {
		this.delegate = impl;
		this.valueCreator = valueCreator;
	}
	
	private final Map<K, V> delegate;
	private final Function<K, V> valueCreator;
	
	public static <K, V> DefaultedMap<K, V> hashMap(Function<K, V> valueCreator) {
		return new DefaultedMap<>(new HashMap<>(), valueCreator);
	}
	
	void putDefault(K key) {
		delegate.put(key, valueCreator.apply(key));
	}
	
	@Override
	public V get(Object key) {
		V value = delegate.get(key);
		if(value == null) {
			K keyk = (K) key;
			V newValue = valueCreator.apply(keyk);
			delegate.put(keyk, newValue);
			return newValue;
		} else return value;
	}
	
	@Override
	public boolean containsKey(Object key) {
		if(delegate.containsKey(key)) {
			return true;
		} else {
			putDefault((K) key);
			return delegate.containsKey(key);
		}
	}
	
	@Override
	public boolean containsValue(Object value) {
		return delegate.containsValue(value);
	}
	
	//Rest of these are autogenerated delegates
	
	@Nullable
	@Override
	public V put(K key, V value) {
		return delegate.put(key, value);
	}
	
	@Override
	public int size() {
		return delegate.size();
	}
	
	@Override
	public boolean isEmpty() {
		return delegate.isEmpty();
	}
	
	@Override
	public V remove(Object key) {
		return delegate.remove(key);
	}
	
	@Override
	public void putAll(@NotNull Map<? extends K, ? extends V> m) {
		delegate.putAll(m);
	}
	
	@Override
	public void clear() {
		delegate.clear();
	}
	
	@NotNull
	@Override
	public Set<K> keySet() {
		return delegate.keySet();
	}
	
	@NotNull
	@Override
	public Collection<V> values() {
		return delegate.values();
	}
	
	@NotNull
	@Override
	public Set<Entry<K, V>> entrySet() {
		return delegate.entrySet();
	}
}